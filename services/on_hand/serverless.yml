service: BREWOPTIX-ON-HAND-API

provider: 
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.region}
  environment: ${self:custom.environment}
  iamRoleStatements:
    - ${self:custom.iamRoleStatements}
    - ${self:provider.sqsRoleStatements}
    - ${self:provider.snsRoleStatements}
    - ${self:provider.secretsManagerRoleStatements}
    - ${self:provider.RDSDataServiceAccessRoleStatements}
  apiGateway:
    restApiId:
      'Fn::ImportValue': BrewOptix-${self:provider.stage}-ApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': BrewOptix-${self:provider.stage}-ApiGateway-rootResourceId
  sqsRoleStatements:
    Effect: Allow
    Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
      - sqs:ListQueues
    Resource:
      - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-projections
  secretsManagerRoleStatements:
    Effect: Allow
    Action:
      - secretsmanager:GetSecretValue
      - secretsmanager:PutResourcePolicy
      - secretsmanager:PutSecretValue
      - secretsmanager:DeleteSecret
      - secretsmanager:DescribeSecret
      - secretsmanager:TagResource
    Resource:
      - ${self:custom.environment.AURORA_DB_SECRET_ARN}
  RDSDataServiceAccessRoleStatements:
    Effect: Allow
    Action:
      - secretsmanager:CreateSecret
      - secretsmanager:ListSecrets
      - secretsmanager:GetRandomPassword
      - tag:GetResources
      - rds-data:BatchExecuteStatement
      - rds-data:BeginTransaction
      - rds-data:CommitTransaction
      - rds-data:ExecuteStatement
      - rds-data:RollbackTransaction
    Resource:
      - "*"
  snsRoleStatements:
    Effect: Allow
    Action:
      - sns:Publish
    Resource:
      - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-on-hand
      - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-projections

custom: ${file(../config.yaml)}

# It is not possible to reference files on directory levels above serverless.yml directly when working in AWS Lambda
# So, we either have to install these additional files as pip packages or `include` them to the package explicitly
# Included python files would be available parallel to serverless.yml and needs to be imported in this structure
# For example:
# fdc_data_dynamodb is present two levels above this serverless.yml, but in common.py it can be imported from cur dir.
package:
  include:
    - ../api_utils.py
    - ../api_constants.py
    - ../common.py
    - ../../log_config.py
    - ../../logging_api.py
    - ../auth.py
    - ../../data_common/*
    - ../../data_dynamodb/*
    - ../../data_dynamodb/repository/*

functions:
  add_on_hand:
    handler: handler.add_on_hand
    name: ${self:provider.stage}-${self:service}-add-on-hand
    description: Add an on-hand inventory record
    timeout: 20
    events:
      - http:
          path: on-hand
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:BREWOPTIX-AUTH-${self:provider.stage}.apiGatewayAuthorizer}

  modify_on_hand:
    handler: handler.modify_on_hand
    name: ${self:provider.stage}-${self:service}-modify-on-hand
    description: Update an on-hand inventory record
    timeout: 20
    events:
      - http:
          path: on-hand
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:BREWOPTIX-AUTH-${self:provider.stage}.apiGatewayAuthorizer}

  get_on_hand:
    handler: handler.get_by_id
    name: ${self:provider.stage}-${self:service}-get-on-hand-by-id
    description: Get an on-hand inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: on-hand/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:BREWOPTIX-AUTH-${self:provider.stage}.apiGatewayAuthorizer}
          request:
            parameters:
              paths:
                entity_id: true

  delete_on_hand:
    handler: handler.delete_by_id
    name: ${self:provider.stage}-${self:service}-delete-on-hand-by-id
    description: Delete an on-hand inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: on-hand/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:BREWOPTIX-AUTH-${self:provider.stage}.apiGatewayAuthorizer}
          request:
            parameters:
              paths:
                entity_id: true

  get_every_on_hand:
    handler: handler.get_every_on_hand
    name: ${self:provider.stage}-${self:service}-get-every-on-hand
    description: Get every on hand item
    timeout: 20
    events:
      - http:
          path: on-hand
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:BREWOPTIX-AUTH-${self:provider.stage}.apiGatewayAuthorizer}

  # SQS handler
  process_projections_queue:
    handler: handler.process_projections_queue
    name: ${self:provider.stage}-${self:service}-process-projections-queue
    description: Process projections queue
    timeout: 120
    events:
      - sqs:
          arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-projections
          batchSize: 1
          enabled: true

resources:
  Resources:
    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-projections
        VisibilityTimeout: 120
    OnHandNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'obj saves are sent to this topic'
        TopicName: ${self:provider.stage}-on-hand
    ProjectionNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'obj saves are sent to this topic'
        TopicName: ${self:provider.stage}-projections

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-prune-plugin
