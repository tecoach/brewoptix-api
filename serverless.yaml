# This service is an identical set of all endpoints that are to be deployed to the cloud
# this is used to test and develop APIs locally
service: BREWOPTIX-API
custom:
  corsStatements:
    origin: '*' # <-- Specify allowed origin. If required, allowed origin can be set to point from webapp deployment URL.
    headers: # <-- Specify allowed headers
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - X-Supplier-Id
      - Access-Control-Allow-Headers
      - Access-Control-Allow-Origin
    allowCredentials: false
  pythonRequirements:
    dockerizePip: true
  splitStacks:
    perFunction: true
  scripts:
    commands:
      localize: sh dynamodb_local_scripts/initialize_dynamodb_local.sh
      delocalize: sh dynamodb_local_scripts/stop_dynamodb_local.sh
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: false
      seed: false
      convertEmptyValues: false

provider:
  name: aws
  runtime: python3.6
  iamRoleStatements: # permissions for all of your functions can be set here
  - Effect: Allow
    Action: # Gives permission to DynamoDB tables in a specific region
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:*:*:*"

  stage: ${opt:stage, 'local'}
  region: ${file(./config.${self:provider.stage}.json):REGION}
  environment:
    REGION: ${file(./config.${self:provider.stage}.json):REGION}
    AUTH0_DOMAIN: ${file(./config.${self:provider.stage}.json):AUTH0_DOMAIN}
    AUTH0_AUDIENCE: ${file(./config.${self:provider.stage}.json):AUTH0_AUDIENCE}
    AUTH0_CLIENT_ID: ${file(./config.${self:provider.stage}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${file(./config.${self:provider.stage}.json):AUTH0_CLIENT_SECRET}
    AUTH0_MANAGEMENT_API_CLIENT_ID: ${file(./config.${self:provider.stage}.json):AUTH0_MANAGEMENT_API_CLIENT_ID}
    AUTH0_MANAGEMENT_API_CLIENT_SECRET: ${file(./config.${self:provider.stage}.json):AUTH0_MANAGEMENT_API_CLIENT_SECRET}
    SIGNUP_ORIGIN_URL: ${file(./config.${self:provider.stage}.json):SIGNUP_ORIGIN_URL}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
    AUTH0_CONNECTION: ${file(./config.${self:provider.stage}.json):AUTH0_CONNECTION}
    STRIPE_SECRET_KEY: ${file(./config.${self:provider.stage}.json):STRIPE_SECRET_KEY}
    EMAIL_TRANSMITTER_SOURCE: ${file(./config.${self:provider.stage}.json):EMAIL_TRANSMITTER_SOURCE}
    S3_UPLOADS_BUCKET_NAME: ${file(./config.${self:provider.stage}.json):S3_UPLOADS_BUCKET_NAME}

functions:
  auth:
    handler: handler.auth
    cors: true
    runtime: nodejs10.x

  add_adjustment:
    handler: services/adjustments/handler.add_adjustment
    name: ${self:provider.stage}-add-adjustment
    description: Add an adjustment inventory record
    timeout: 20
    events:
      - http:
          path: adjustments
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_adjustment:
    handler: services/adjustments/handler.modify_adjustment
    name: ${self:provider.stage}-modify-adjustment
    description: Update an adjustment inventory record
    timeout: 20
    events:
      - http:
          path: adjustments
          method: put
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_adjustment:
    handler: services/adjustments/handler.get_by_id
    name: ${self:provider.stage}-get-adjustment-by-id
    description: Get an adjustment inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: adjustments/{entity_id}
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_adjustment:
    handler: services/adjustments/handler.delete_by_id
    name: ${self:provider.stage}-delete-adjustment-by-id
    description: Delete an adjustment inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: adjustments/{entity_id}
          method: delete
          cors: true
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_adjustment:
    handler: services/adjustments/handler.get_every_adjustment
    name: ${self:provider.stage}-get-every-adjustments
    description: Get every adjustments
    timeout: 20
    events:
      - http:
          path: adjustments
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_adjustments_by_daterange:
    handler: services/adjustments/handler.get_adjustments_by_daterange
    name: ${self:provider.stage}-get-adjustments-by-date
    description: Get adjustments by adjustment date range
    timeout: 20
    events:
      - http:
          path: adjustments/between/{min_adjustment_date}/{max_adjustment_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_adjustment_date: true
                max_adjustment_date: true
      - http:
          path: adjustments/between/{min_adjustment_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_adjustment_date: true
  add_brand:
    handler: services/brands/handler.add_brand
    name: ${self:provider.stage}-add-brand
    description: Add a new brand
    timeout: 20
    events:
      - http:
          path: brands
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_brand:
    handler: services/brands/handler.modify_brand
    name: ${self:provider.stage}-modify-brand
    description: Update a brand
    timeout: 20
    events:
      - http:
          path: brands
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_brand:
    handler: services/brands/handler.get_by_id
    name: ${self:provider.stage}-get-brand-by-id
    description: Get a brand using entity_id
    timeout: 20
    events:
      - http:
          path: brands/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_brand:
    handler: services/brands/handler.delete_by_id
    name: ${self:provider.stage}-delete-brand-by-id
    description: Delete a brand using entity_id
    timeout: 20
    events:
      - http:
          path: brands/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_brand:
    handler: services/brands/handler.get_every_brand
    name: ${self:provider.stage}-get-every-brands
    description: Get every brands
    timeout: 20
    events:
      - http:
          path: brands
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_every_container:
    handler: services/containers/handler.get_every_container
    name: ${self:provider.stage}-get-every-containers
    description: Get every containers
    timeout: 20
    events:
      - http:
          path: containers
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_container:
    handler: services/containers/handler.add_container
    name: ${self:provider.stage}-add-container
    description: Add a new container
    timeout: 20
    events:
      - http:
          path: containers
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_container:
    handler: services/containers/handler.modify_container
    name: ${self:provider.stage}-modify-container
    description: Update a container
    timeout: 20
    events:
      - http:
          path: containers
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_container:
    handler: services/containers/handler.get_by_id
    name: ${self:provider.stage}-get-container-by-id
    description: Get a container using entity_id
    timeout: 20
    events:
      - http:
          path: containers/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_container:
    handler: services/containers/handler.delete_by_id
    name: ${self:provider.stage}-delete-container-by-id
    description: Delete a container using entity_id
    timeout: 20
    events:
      - http:
          path: containers/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  add_count:
    handler: services/counts/handler.add_count
    name: ${self:provider.stage}-add-count
    description: Add an count
    timeout: 20
    events:
      - http:
          path: counts
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_count:
    handler: services/counts/handler.modify_count
    name: ${self:provider.stage}-modify-count
    description: Update an count
    timeout: 20
    events:
      - http:
          path: counts
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_count:
    handler: services/counts/handler.get_by_id
    name: ${self:provider.stage}-get-count-by-id
    description: Get a count by entity_id
    timeout: 20
    events:
      - http:
          path: counts/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_count_sheet:
    handler: services/counts/handler.get_count_sheet_by_id
    name: ${self:provider.stage}-get-count-sheet-by-id
    description: Get a count sheet (PDF) by entity_id
    timeout: 20
    events:
      - http:
          path: counts/sheet/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/pdf'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_count:
    handler: services/counts/handler.delete_by_id
    name: ${self:provider.stage}-delete-count-by-id
    description: Delete a count by entity_id
    timeout: 20
    events:
      - http:
          path: counts/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_count:
    handler: services/counts/handler.get_every_count
    name: ${self:provider.stage}-get-every-count
    description: Get every counts
    timeout: 20
    events:
      - http:
          path: counts
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_counts_by_daterange:
    handler: services/counts/handler.get_counts_by_daterange
    name: ${self:provider.stage}-get-counts-by-date
    description: Get counts by count date range
    timeout: 20
    events:
      - http:
          path: counts/between/{min_count_date}/{max_count_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_count_date: true
                max_count_date: true
      - http:
          path: counts/between/{min_count_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_count_date: true

  get_every_distributor:
    handler: services/distributors/handler.get_every_distributor
    name: ${self:provider.stage}-get-every-distributor
    description: Get every distributor
    timeout: 20
    events:
      - http:
          path: distributors
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_distributor:
    handler: services/distributors/handler.add_distributor
    name: ${self:provider.stage}-add-entity
    description: Add a new distributor
    timeout: 20
    events:
      - http:
          path: distributors
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_distributor:
    handler: services/distributors/handler.modify_distributor
    name: ${self:provider.stage}-modify-entity
    description: Update a distributor
    timeout: 20
    events:
      - http:
          path: distributors
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_distributor:
    handler: services/distributors/handler.get_by_id
    name: ${self:provider.stage}-get-by-id
    description: Get a distributor using entity_id
    timeout: 20
    events:
      - http:
          path: distributors/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_distributor:
    handler: services/distributors/handler.delete_by_id
    name: ${self:provider.stage}-delete-by-id
    description: Delete a distributor using entity_id
    timeout: 20
    events:
      - http:
          path: distributors/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  add_user_to_distributor:
    handler: services/distributors/handler.add_user_to_distributor
    name: ${self:provider.stage}-add-user-to-distributor
    description: Add a new or existing user to a distributor
    timeout: 120
    events:
      - http:
          path: distributors/users
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  delete_user_in_distributor:
    handler: services/distributors/handler.delete_user_in_distributor
    name: ${self:provider.stage}-delete-user-in-distributor
    description: Delete a user in distributor
    timeout: 20
    events:
      - http:
          path: distributors/users/{user_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                user_id: true

  get_all_users_in_distributor:
    handler: services/distributors/handler.get_all_users_in_distributor
    name: ${self:provider.stage}-get-all-users-in-distributor
    description: Handle GET all user profiles under a distributor
    timeout: 20
    events:
      - http:
          path: distributors/users
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_merchandise:
    handler: services/merchandise/handler.add_merchandise
    name: ${self:provider.stage}-add-merchandise
    description: Add a new merchandise
    timeout: 20
    events:
      - http:
          path: merchandise
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_merchandise:
    handler: services/merchandise/handler.modify_merchandise
    name: ${self:provider.stage}-modify-merchandise
    description: Update a merchandise
    timeout: 20
    events:
      - http:
          path: merchandise
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_merchandise:
    handler: services/merchandise/handler.get_by_id
    name: ${self:provider.stage}-get-merchandise-by-id
    description: Get a merchandise using entity_id
    timeout: 20
    events:
      - http:
          path: merchandise/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_merchandise:
    handler: services/merchandise/handler.delete_by_id
    name: ${self:provider.stage}-delete-merchandise-by-id
    description: Delete a merchandise using entity_id
    timeout: 20
    events:
      - http:
          path: merchandise/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_merchandise:
    handler: services/merchandise/handler.get_every_merchandise
    name: ${self:provider.stage}-get-every-merchandise
    description: Get every merchandise
    timeout: 20
    events:
      - http:
          path: merchandise
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_on_hand:
    handler: services/on_hand/handler.add_on_hand
    name: ${self:provider.stage}-add-on-hand
    description: Add an on-hand inventory record
    timeout: 20
    events:
      - http:
          path: on-hand
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_on_hand:
    handler: services/on_hand/handler.modify_on_hand
    name: ${self:provider.stage}-modify-on-hand
    description: Update an on-hand inventory record
    timeout: 20
    events:
      - http:
          path: on-hand
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_on_hand:
    handler: services/on_hand/handler.get_by_id
    name: ${self:provider.stage}-get-on-hand-by-id
    description: Get an on-hand inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: on-hand/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_on_hand:
    handler: services/on_hand/handler.delete_by_id
    name: ${self:provider.stage}-delete-on-hand-by-id
    description: Delete an on-hand inventory record using entity_id
    timeout: 20
    events:
      - http:
          path: on-hand/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_on_hand:
    handler: services/on_hand/handler.get_every_on_hand
    name: ${self:provider.stage}-get-every-on-hand
    description: Get every on hand item
    timeout: 20
    events:
      - http:
          path: on-hand
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_package_type:
    handler: services/package_types/handler.add_package_type
    name: ${self:provider.stage}-add-package_type
    description: Add a new package_type
    timeout: 20
    events:
      - http:
          path: package-types
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_package_type:
    handler: services/package_types/handler.modify_package_type
    name: ${self:provider.stage}-modify-package_type
    description: Update a package_type
    timeout: 20
    events:
      - http:
          path: package-types
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_package_type:
    handler: services/package_types/handler.get_by_id
    name: ${self:provider.stage}-get-package_type-by-id
    description: Get a package_type using entity_id
    timeout: 20
    events:
      - http:
          path: package-types/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_package_type:
    handler: services/package_types/handler.delete_by_id
    name: ${self:provider.stage}-delete-package-type-by-id
    description: Delete a package_type using entity_id
    timeout: 20
    events:
      - http:
          path: package-types/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_package_type:
    handler: services/package_types/handler.get_every_package_type
    name: ${self:provider.stage}-get-every-package-type
    description: Get every package types
    timeout: 20
    events:
      - http:
          path: package-types
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  charge_using_stripe:
    handler: handler.charge_by_stripe
    name: ${self:provider.stage}-charge-user-through-stripe
    description: Process a stripe payment
    timeout: 20
    events:
      - http:
          path: payment/stripe
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  add_production:
    handler: services/production/handler.add_production
    name: ${self:provider.stage}-add-production
    description: Add a new production entry
    timeout: 20
    events:
      - http:
          path: production
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_production:
    handler: services/production/handler.modify_production
    name: ${self:provider.stage}-modify-production
    description: Update a production entry
    timeout: 20
    events:
      - http:
          path: production
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_production:
    handler: services/production/handler.get_by_id
    name: ${self:provider.stage}-get-production-by-id
    description: Get a production entry using entity_id
    timeout: 20
    events:
      - http:
          path: production/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_production:
    handler: services/production/handler.delete_by_id
    name: ${self:provider.stage}-delete-production-by-id
    description: Delete a production entry by entity_id
    timeout: 20
    events:
      - http:
          path: production/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_production:
    handler: services/production/handler.get_every_production
    name: ${self:provider.stage}-get-every-production
    description: Get every production entries under the supplier
    timeout: 20
    events:
      - http:
          path: production
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_production_by_daterange:
    handler: services/production/handler.get_production_by_daterange
    name: ${self:provider.stage}-get-production-by-date-range
    description: Get production by production date range
    timeout: 20
    events:
      - http:
          path: production/between/{min_production_date}/{max_production_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_production_date: true
                max_production_date: true
      - http:
          path: production/between/{min_production_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_production_date: true

  add_product:
    handler: services/products/handler.add_product
    name: ${self:provider.stage}-add-product
    description: Add a new product
    timeout: 20
    events:
      - http:
          path: products
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_product:
    handler: services/products/handler.modify_product
    name: ${self:provider.stage}-modify-product
    description: Update a product
    timeout: 20
    events:
      - http:
          path: products
          method: put
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_product:
    handler: services/products/handler.get_by_id
    name: ${self:provider.stage}-get-product-by-id
    description: Get a product using entity_id
    timeout: 20
    events:
      - http:
          path: products/{entity_id}
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_product:
    handler: services/products/handler.delete_by_id
    name: ${self:provider.stage}-delete-product-by-id
    description: Delete a product using entity_id
    timeout: 20
    events:
      - http:
          path: products/{entity_id}
          method: delete
          cors: true
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_product:
    handler: handler.get_every_product
    name: ${self:provider.stage}-get-every-product
    description: Get every products
    timeout: 20
    events:
      - http:
          path: products
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_or_create_profile:
    handler: services/profile/handler.get_or_create_profile
    name: ${self:provider.stage}-get-profile
    description: Handle GET request for user profile
    timeout: 20
    events:
      - http:
          path: users
          method: get
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  update_profile:
    handler: services/profile/handler.update_profile
    name: ${self:provider.stage}-update-profile
    description: Handle PUT request for user profile
    timeout: 20
    events:
      - http:
          path: users
          method: put
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  delete_profile:
    handler: services/profile/handler.delete_account
    name: ${self:provider.stage}-delete-account
    description: Handles DELETE user account
    timeout: 20
    events:
      - http:
          path: users
          method: delete
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_purchase_order:
    handler: services/purchase_orders/handler.add_purchase_order
    name: ${self:provider.stage}-add-purchase-order
    description: Add a purchase order
    timeout: 20
    events:
      - http:
          path: purchase-orders
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_purchase_order:
    handler: services/purchase_orders/handler.modify_purchase_order
    name: ${self:provider.stage}-modify-purchase-order
    description: Update a purchase order
    timeout: 20
    events:
      - http:
          path: purchase-orders
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_purchase_order:
    handler: services/purchase_orders/handler.get_by_id
    name: ${self:provider.stage}-get-purchase-order-by-id
    description: Get a purchase order by entity_id
    timeout: 20
    events:
      - http:
          path: purchase-orders/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_purchase_order:
    handler: services/purchase_orders/handler.delete_by_id
    name: ${self:provider.stage}-delete-purchase-order-by-id
    description: Delete a purchase order by entity_id
    timeout: 20
    events:
      - http:
          path: purchase-orders/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_purchase_orders_by_order_date:
    handler: services/purchase_orders/handler.get_purchase_orders_by_order_date
    name: ${self:provider.stage}-get-purchase_orders-by-order-date
    description: Get purchase orders by order date range
    timeout: 20
    events:
      - http:
          path: purchase-orders/ordered-between/{min_order_date}/{max_order_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_order_date: true
                max_order_date: true
      - http:
          path: purchase-orders/ordered-between/{min_order_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_order_date: true

  get_purchase_orders_by_pack_date:
    handler: services/purchase_orders/handler.get_purchase_orders_by_pack_date
    name: ${self:provider.stage}-get-purchase-orders-by-pack-date
    description: Get purchase orders by pack date range
    timeout: 20
    events:
      - http:
          path: purchase-orders/packed-between/{min_pack_date}/{max_pack_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_pack_date: true
                max_pack_date: true
      - http:
          path: purchase-orders/packed-between/{min_pack_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_pack_date: true

  get_purchase_orders_by_ship_date:
    handler: services/purchase_orders/handler.get_purchase_orders_by_ship_date
    name: ${self:provider.stage}-get-purchase-orders-by-ship-date
    description: Get purchase orders by ship date range
    timeout: 20
    events:
      - http:
          path: purchase-orders/shipped-between/{min_ship_date}/{max_ship_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_ship_date: true
                max_ship_date: true
      - http:
          path: purchase-orders/shipped-between/{min_ship_date}
          method: get
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                min_ship_date: true

  add_retail_package:
    handler: services/retail_packages/handler.add_retail_package
    name: ${self:provider.stage}-add-retail_package
    description: Add a new retail_package
    timeout: 20
    events:
      - http:
          path: retail-packages
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_retail_package:
    handler: services/retail_packages/handler.modify_retail_package
    name: ${self:provider.stage}-modify-retail_package
    description: Update a retail_package
    timeout: 20
    events:
      - http:
          path: retail-packages
          method: put
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_retail_package:
    handler: services/retail_packages/handler.get_by_id
    name: ${self:provider.stage}-get-retail_package-by-id
    description: Get a retail_package using entity_id
    timeout: 20
    events:
      - http:
          path: retail-packages/{entity_id}
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_retail_package:
    handler: services/retail_packages/handler.delete_by_id
    name: ${self:provider.stage}-delete-retail_package-by-id
    description: Delete a retail_package using entity_id
    timeout: 20
    events:
      - http:
          path: retail-packages/{entity_id}
          method: delete
          cors: true
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_retail_package:
    handler: services/retail_packages/handler.get_every_retail_package
    name: ${self:provider.stage}-get-every-retail-package
    description: Get every retail package
    timeout: 20
    events:
      - http:
          path: retail-packages
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_supplier_distributor:
    handler: services/supplier_distributors/handler.add_supplier_distributor
    name: ${self:provider.stage}-add-entity
    description: Add a new supplier-distributor
    timeout: 20
    events:
      - http:
          path: supplier-distributors
          method: post
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_supplier_distributor:
    handler: services/supplier_distributors/handler.modify_supplier_distributor
    name: ${self:provider.stage}-modify-entity
    description: Update a supplier-distributor
    timeout: 20
    events:
      - http:
          path: supplier-distributors
          method: put
          cors: ${self:custom.corsStatements}
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_supplier_distributor:
    handler: services/supplier_distributors/handler.get_by_id
    name: ${self:provider.stage}-get-by-id
    description: Get a supplier-distributor using entity_id
    timeout: 20
    events:
      - http:
          path: supplier-distributors/{entity_id}
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_supplier_distributor:
    handler: services/supplier_distributors/handler.delete_by_id
    name: ${self:provider.stage}-delete-by-id
    description: Delete a supplier distributor using entity_id
    timeout: 20
    events:
      - http:
          path: supplier-distributors/{entity_id}
          method: delete
          cors: ${self:custom.corsStatements}
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_supplier_distributor:
    handler: services/supplier_distributors/handler.get_every_supplier_distributor
    name: ${self:provider.stage}-get-every-entity
    description: Get every supplier_distributors
    timeout: 20
    events:
      - http:
          path: supplier-distributors
          method: get
          cors: ${self:custom.corsStatements}
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  add_supplier:
    handler: services/suppliers/handler.add_supplier
    name: ${self:provider.stage}-add-supplier
    description: Add a new supplier
    timeout: 20
    events:
      - http:
          path: suppliers
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  modify_supplier:
    handler: services/suppliers/handler.modify_supplier
    name: ${self:provider.stage}-modify-supplier
    description: Update a supplier
    timeout: 20
    events:
      - http:
          path: suppliers
          method: put
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  get_supplier:
    handler: services/suppliers/handler.get_by_id
    name: ${self:provider.stage}-get-supplier-by-id
    description: Get a supplier using entity_id
    timeout: 20
    events:
      - http:
          path: suppliers/{entity_id}
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  delete_supplier:
    handler: services/suppliers/handler.delete_by_id
    name: ${self:provider.stage}-delete-supplier-by-id
    description: Delete a supplier using entity_id
    timeout: 20
    events:
      - http:
          path: suppliers/{entity_id}
          method: delete
          cors: true
          integration: lambda
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
          request:
            parameters:
              paths:
                entity_id: true

  get_every_supplier:
    handler: services/suppliers/handler.get_every_supplier
    name: ${self:provider.stage}-get-every-supplier
    description: Get every supplier
    timeout: 20
    events:
      - http:
          path: suppliers
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          authorizer:   # REF: https://forum.serverless.com/t/rest-api-with-custom-authorizer-how-are-you-dealing-with-authorization-and-policy-cache/3310
            name: auth
            resultTtlInSeconds: 300
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  login:
    handler: services/user/handler.login
    name: ${self:provider.stage}-login
    description: Handle login request
    timeout: 20
    events:
      - http:
          path: login
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  signup:
    handler: services/user/handler.signup
    name: ${self:provider.stage}-signup
    description: Handle signup request
    timeout: 20
    events:
      - http:
          path: signup
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  password_reset:
    handler: services/user/handler.password_reset
    name: ${self:provider.stage}-password-reset
    description: Handle user password reset request
    timeout: 20
    events:
      - http:
          path: password-reset
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  social_auth:
    handler: services/social/handler.social_auth
    name: ${self:provider.stage}-social-auth
    description: Handle social authentication request
    timeout: 20
    events:
      - http:
          path: social-auth
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  social_signin:
    handler: services/social/handler.social_signin
    name: ${self:provider.stage}-social-signin
    description: Handle social signin
    timeout: 20
    events:
      - http:
          path: social-signin
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

  social_signup:
    handler: services/social/handler.social_signup
    name: ${self:provider.stage}-social-signup
    description: Handle social signup
    timeout: 20
    events:
      - http:
          path: social-signup
          method: post
          cors: true
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.path('$.body')
          integration: lambda

plugins:
  - serverless-offline-python
  - serverless-python-requirements
  - serverless-plugin-scripts
  - serverless-pseudo-parameters
  - serverless-prune-plugin
